utils:::menuInstallPkgs()
x<-c(10,20,30,40,50)
y<-c(11,22,33,44,55)
z<-c(1,3,4,5,7)
scatter3D(x,y,z)
plot3d(x,y,z)
scatter3D(x,y,z)
?plot3d
library(plot3D)
scatter3D(x,y,z)
r<-rnorm(30,60,1)
s<-rnorm(30,60,1)
q()
#------------------------------------------------------------------
x1<-c("Dec","Jan","May","Nov")
month_levels<-c("Jan","Feb","March","Apr","May","June","July","Aug","Sep","Oct","Nov","Dec")
y1<-factor(x1,levels=month_levels)
print(y1)
sort(y1)
#------------------------------------------------------------------
x1<-c("Dec","Jan","May","Nov","qwerty")
month_levels<-c("Jan","Feb","March","Apr","May","June","July","Aug","Sep","Oct","Nov","Dec")
y1<-factor(x1,levels=month_levels)
print(y1)
#------------------------------------------------------------------
x1<-c("Dec","Jan","May","Nov")
month_levels<-c("Jan","Feb","March","Apr","May","June","July","Aug","Sep","Oct","Nov","Dec")
y1<-factor(x1,levels=month_levels)
print(y1)
sort(y1)
levels?
help
help()
ordered(y1)
is.factor(y1)
as.ordered(y1)
sort(y1)
#list
list_info<-list("Blue","YEllow",c(12,3,24),TRUE,13.5,103.5)
print(list_info)
is.ordered(y1)
a<-c(1,2,3,4,5)
b<-as.ordered(a)
is.ordered(b)
length(list_info)
list_info[6]= NULL
length(list_info)
print(list_info[7])
print(list_info[7])
list_info[2]= NULL
length(list_info)
print(list_info)
#Multiply matrix_A by a scalar value of 2 and store the result in a new matrix named matrix_mult
matrix_mult<-matrix_A*2
#Create two matrices, matrix_A and matrix_B
matrix_A<-matrix(c(10,5,3,6,3,4,2,5,2),nrow = 3,ncol=3,byrow = TRUE,dimnames = list(c("mAR1","mAR2","mAR3"),c("mAC1","mAC2","mAC3")))
#Multiply matrix_A by a scalar value of 2 and store the result in a new matrix named matrix_mult
matrix_mult<-matrix_A *2
rownames(matrix_mult)=c("m(A.2)R1","m(A.2)R2","m(A.2)R3")
colnames(matrix_mult)=c("m(A.2)C1","m(A.2)C2","m(A.2)C3")
print("Matrix Multiplication By 2")
print(matrix_mult)
#Create two matrices, matrix_A and matrix_B
matrix_A<-matrix(c(10,5,3,6,3,4,2,5,2),nrow = 3,ncol=3,byrow = TRUE,dimnames = list(c("mAR1","mAR2","mAR3"),c("mAC1","mAC2","mAC3")))
matrix_B<-matrix(c(2,4,1,9,4,2,7,6,4),nrow = 3,ncol=3,byrow = TRUE,dimnames = list(c("mBR1","mBR2","mBR3"),c("mBC1","mBC2","mBC3")))
#Calculate the sum of matrix_A and matrix_B and store the result in a new matrix named matrix_sum.
matrix_sum<-matrix_A+matrix_B
rownames(matrix_sum)=c("m(A+B)R1","m(A+B)R2","m(A+B)R3")
colnames(matrix_sum)=c("m(A+B)C1","m(A+B)C2","m(A+B)C3")
print("Matrix Sum")
print(matrix_sum)
#Calculate the difference between matrix_A and matrix_B and store the result in a new matrix named matrix_diff.
matrix_diff<-matrix_A-matrix_B
rownames(matrix_diff)=c("m(A-B)R1","m(A-B)R2","m(A-B)R3")
colnames(matrix_diff)=c("m(A-B)C1","m(A-B)C2","m(A-B)C3")
print("Matrix Diffrence")
print(matrix_diff)
#Multiply matrix_A by a scalar value of 2 and store the result in a new matrix named matrix_mult
matrix_mult<-matrix_A *2
rownames(matrix_mult)=c("m(A.2)R1","m(A.2)R2","m(A.2)R3")
colnames(matrix_mult)=c("m(A.2)C1","m(A.2)C2","m(A.2)C3")
print("Matrix Multiplication By 2")
print(matrix_mult)
#Calculate the product of matrix_A and matrix_B and store the result in a new matrix named matrix_product
matrix_product<-matrix_A %% matrix_B
rownames(matrix_product)=c("m(A*B)R1","m(A*B)R2","m(A*B)R3")
colnames(matrix_product)=c("m(A*B)C1","m(A*B)C2","m(A*B)C3")
print("Matrix Product")
print(matrix_product)
#Find the transpose of matrix_A and store the result in a new matrix named matrix_A_transpose
matrix_A_transpose<-t(matrix_A)
print("Matrix A Transpose")
print(matrix_A_transpose)
#Calculate the determinant of matrix_B and store it in a variable named determinant_B
determinant_B<-det(matrix_B)
print("Matrix B Determinant")
print(determinant_B)
#Invert matrix_B to obtain the inverse matrix and store it in a new matrix named matrix_B_inverse
matrix_B_inverse<-solve(matrix_B)
print("Matrix B Inverse")
print(matrix_B_inverse)
#Check if matrix_B is orthogonal (i.e., its transpose is equal to its inverse)
print("Checking If Matrix B is Orthogonal ...")
matrix_B_transpose<-t(matrix_B)
orthogonal_B<-matrix_B_transpose==matrix_B_inverse
c=0
for (x in orthogonal_B) {
if(x==FALSE){
c=1
break
}
}
if(c==0){
print("It is orthogonal")
}else{
print("It is not orthogonal")
}
#Calculate the element-wise square root of matrix_A and store the result in a new matrix named matrix_A_sqrt
matrix_A_sqrt<-sqrt(matrix_A)
print("SquareRoot of Matrix A")
print(matrix_A_sqrt)
#Calculate the mean of all the elements in matrix_B
mean_matrix_B<-mean(matrix_B)
print("Mean of Matrix A ")
print(mean_matrix_B)
#Calculate the sum of each column in matrix_A.
sum_matrix_A<-c(sum(matrix_A[,1]),sum(matrix_A[,2]),sum(matrix_A[,3]))
print("Matrix A Colomn Sum")
print(sum_matrix_A)
#Calculate the row means of matrix_B.
row_means_matrix_B<-c(mean(matrix_B[1,]),mean(matrix_B[2,]),mean(matrix_B[3]))
print("Matrix B Row Mean")
print(row_means_matrix_B)
#Extract the second row of matrix_A and store it in a vector named second_row_A
second_row_A<-matrix_A[2,]
print("Second Row of Matrix A")
print(second_row_A)
#Extract the third column of matrix_B and store it in a vector named third_column_B
third_column_B<-matrix_B[,3]
print("Third Column of Matrix B")
print(third_column_B)
#Calculate the row means of matrix_B.
row_means_matrix_B<-c(mean(matrix_B[1,]),mean(matrix_B[2,]),mean(matrix_B[3,]))
print("Matrix B Row Mean")
print(row_means_matrix_B)
#Calculate the row means of matrix_B.
row_means_matrix_B<-c(mean(matrix_B[1,]),mean(matrix_B[2,]),mean(matrix_B[3,]))
print("Matrix B Row Mean")
print(row_means_matrix_B)
sizes <- factor(c("Samll","Medium","Large"))
sizes
sizes<-relevel(size,"Medium")
sizes<-relevel(sizes,"Medium")
sizes
sizes<-factor(sizes,levels = rev(levels(sizes)))
sizes
sizes <- factor(c("Samll","Medium","Large"))
sizes
sizes <- factor(c("Samll","Medium","Large"))
sizes
sizes<-relevel(sizes,"Medium")
sizes
sizes<-factor(sizes,levels = rev(levels(sizes)))
sizes
df<- data.frame(NumberCol = 1:3,
TextcCol = c("FirstText", "SecondText","ThirdText")),
BoolCol = c(TRUE,TRUE,FALSE),
DoubleCol = c(1.2,4.4,7,4))
df<- data.frame(NumberCol = 1:3,
TextcCol = c("FirstText", "SecondText","ThirdText"),
BoolCol = c(TRUE,TRUE,FALSE),
DoubleCol = c(1.2,4.4,7,4))
df
df<- data.frame(
NumberCol = 1:3,
TextcCol = c("FirstText", "SecondText","ThirdText"),
BoolCol = c(TRUE,TRUE,FALSE),
DoubleCol = c(1.2,4.4,7.4)
)
df
str(df)
df<- data.frame(
NumberCol = 1:3,
TextcCol = c("FirstText", "SecondText","ThirdText"),
BoolCol = c(TRUE,TRUE,FALSE),
DoubleCol = c(1.2,4.4,7.4),
stringsAsFactors = False
)
df
str(df)
df<- data.frame(
NumberCol = 1:3,
TextcCol = c("FirstText", "SecondText","ThirdText"),
BoolCol = c(TRUE,TRUE,FALSE),
DoubleCol = c(1.2,4.4,7.4),
stringsAsFactors = False
)
df
df<- data.frame(
NumberCol = 1:3,
TextcCol = c("FirstText", "SecondText","ThirdText"),
BoolCol = c(TRUE,TRUE,FALSE),
DoubleCol = c(1.2,4.4,7.4),
stringsAsFactors = FALSE
)
df
df<- data.frame(
NumberCol = 1:3,
TextcCol = c("FirstText", "SecondText","ThirdText"),
BoolCol = c(TRUE,TRUE,FALSE),
DoubleCol = c(1.2,4.4,7.4),
#stringsAsFactors = FALSE
stringsAsFactors = TRUE
)
df
str(df)
v1<-1:3
v2<-c("FirstText", "SecondText","ThirdText")
v3<-c(1.2,4.4,7.4),
df2<-data.frame(col1=v1,col2=v2,col3=v3)
v3<-c(1.2,4.4,7.4)
df2<-data.frame(col1=v1,col2=v2,col3=v3)
df2
listdf<-list(item1=1:3,item2=c("FirstText", "SecondText","ThirdText"),item3=c(1.2,4.4,7.4))
newldf<-as.data.frame(listdf)
newldf
is.data.frame(newldf)
listdf<-list(item1=1:3,item2=c( "SecondText","ThirdText"),item3=c(1.2,4.4,7.4))
newldf<-as.data.frame(listdf)
newldf
listdf<-list(item1=1:3,item2=c( "SecondText","ThirdText"),item3=c(1.2,4.4,7.4))
listdf<-list(item1=1:3,item2=c( "SecondText","ThirdText"),item3=c(1.2,4.4,7.4))
newldf<-as.data.frame(listdf)
newldf
listdf<-list(item1=1:3,item2=c( "SecondText","ThirdText"),item3=c(1.2,4.4,7.4))
newldf<-as.data.frame(listdf)
newldf
is.data.frame(newldf)
listdf<-list(item1=1:3,item2=c( "SecondText","ThirdText"),item3=c(1.2,4.4,7.4))
newldf<-as.data.frame(listdf)
newldf
listdf<-list(item1=1:3,item2=c("SecondText","ThirdText"),item3=c(1.2,4.4,7.4))
newldf<-as.data.frame(listdf)
newldf
listdf<-list(item1=1:3,item2=c("SecondText","ThirdText"),item3=c(1.2,4.4,7.4))
newldf<-as.data.frame(listdf)
newldf
listdf<-list(item1=1:3,item2=c("SecondText","ThirdText"),item3=c(4.4,7.4))
newldf<-as.data.frame(listdf)
newldf
listdf<-list(item1=1:3,item2=c("SecondText","ThirdText"),item3=c(4.4,7.4))
newldf<-as.data.frame(listdf)
newldf
matA<-matrix(c(10,5,3,6),nrow = 2,ncol=2,byrow = TRUE,dimnames = list(c("m1R1","m1R2"),c("m1C1","m1C2")))
matdf<-as.data.frame(matA)
matA
i
listdf<-list(item1=1:3,item2=c("SecondText","ThirdText"),item3=c(4.4,7.4))
newldf<-as.data.frame(listdf)
newldf
listdf<-list(item1=1:3,item2=c("SecondText","ThirdText"),item3=c(4.4,7.4))
newldf<-as.data.frame(listdf)
newldf
matA<-matrix(c(10,5,3,6),nrow = 2,ncol=2,byrow = TRUE,dimnames = list(c("m1R1","m1R2"),c("m1C1","m1C2")))
listdf<-list(item1=1:2,item2=c("SecondText","ThirdText"),item3=c(4.4,7.4))
newldf<-as.data.frame(listdf)
newldf
df<-rbind(df,c(4,"FourthText",FALSE,5.5))
attributes(df)
#matrix to dataframe
matA<-matrix(c(10,5,3,6),nrow = 2,ncol=2,byrow = TRUE,dimnames = list(c("m1R1","m1R2"),c("m1C1","m1C2")))
matdf<-as.data.frame(matA)
#Dataframe
df<- data.frame(
NumberCol = 1:3,
TextcCol = c("FirstText", "SecondText","ThirdText"),
BoolCol = c(TRUE,TRUE,FALSE),
DoubleCol = c(1.2,4.4,7.4),
#stringsAsFactors = FALSE
stringsAsFactors = TRUE
)
attributes(df)
df[2:3,]
df[c(2,3)]
df[c("NumberCol","TextCol")]
df[c("NumberCol","TextcCol")]
df[1:2,c(1,3)]
df[,v]
v<-c(1,2,4)
df[,v]
df[,2]
df[,2,drop =FALSE]
df[,2]
data()
mtcars
mt[3]
mtcars[3]
mtcars[10,]
max(mtcars[1])
mtcars[9]==0
mtcar[mtcars$am==0]
mtcars[mtcars$am==0]
mtcars[mtcars[9]==0]
mtcars[mtcars$am==0,]
size(mtcars)
size(a[1])
dim(a)
a<-mtcars[mtcars$am==0,]
dim(a)
nrow(a)
b<-mtcars[mtcars$vs==0,]
row.names(b)
sixCyllinder<-mtcars[mtcars$cyl==6]
sixCyllinder
sixCyllinder<-mtcars[mtcars$cyl==6]
sixCyllinder
sixCyllinder<-mtcars[mtcars$cyl==6,]
sixCyllinder
foutcylindermaxmpg<-max(mtcars[mtcars$cyl==4,])
foutcylindermaxmpg
maxfcylmpg<-max(foutcylinder$mpg)
foutcylinder<-mtcars[mtcars$cyl==4,])
maxfcylmpg<-max(foutcylinder$mpg)
foutcylinder<-mtcars[mtcars$cyl==4,]
maxfcylmpg<-max(foutcylinder$mpg)
maxfcylmpg
nrow(foutcylinder[foutcylinder$am==0])
foutcylinder[foutcylinder$am==0]
mtcars[mtcars$am==0&&mtcars$cyl==4]
foutcylinder[foutcylinder$am==0,]
mean(mtcars[mtcars$cyl==6,]$wt)
mean(mtcars[mtcars$cyl==8,]$wt)
mean(mtcars[(mtcars$cyl==8&&mtcars$am==0),]$wt)
mean(mtcars[(mtcars$cyl==8&mtcars$am==0),]$wt)
#=========================================================
student_scores<-data.frame(
StudentID= sample(1:100),
Gender=sample(c("Male","Female"),replace = TRUE),
Age= sample(c(1:100),replace = TRUE),
Marks=sample(c(40:100),replace = TRUE)
)
#=========================================================
student_scores<-data.frame(
StudentID= sample(1:100),
Gender=sample(c("Male","Female"),replace = TRUE),
Age= sample(c(1:100),replace = TRUE),
Marks=sample(c(1:100),replace = TRUE)
)
print(student_scores)
#=========================================================
student_scores<-data.frame(
StudentID= sample(1:100),
Gender=sample(c("Male","Female"),replace = TRUE),
Age= sample(c(1:100),replace = TRUE),
Marks=round(runif(100,min=40,max=99))
)
print(student_scores)
#=========================================================
student_scores<-data.frame(
StudentID= sample(1:100),
Gender=sample(c("Male","Female"),replace = TRUE),
Age= sample(18:25,100),replace = TRUE),
Marks=round(runif(100,min=40,max=99))
#=========================================================
student_scores<-data.frame(
StudentID= sample(1:100),
Gender=sample(c("Male","Female"),replace = TRUE),
Age= sample(18:25,100,replace = TRUE),
Marks=round(runif(100,min=40,max=99))
)
print(student_scores)
#=========================================================
student_scores<-data.frame(
StudentID= sample(1:100),
Gender=sample(c("Male","Female"),100,replace = TRUE),
Age= sample(18:25,100,replace = TRUE),
Marks=round(runif(100,min=40,max=99))
)
print(student_scores)
write.csv(student_scores,"student_scores.csv",row.names = FALSE)
print(getwd())
setwd("C:\Users\aravi\Desktop\StatisticsUsingR\Classwork")
setwd("C:\\Users\\aravi\\Desktop\\StatisticsUsingR\\Classwork")
print(getwd())
write.csv(student_scores,"student_scores.csv",row.names = FALSE)
data<-read.csv("student_scores.csv")
print(data)
max_marks<-max(data$Marks)
max_marks
min_age<-min(data$Age)
min_age
print(is.data.frame(data))
age_greater_than_20<-data[data$Age>20]
age_greater_than_20
age_greater_than_20<-data[data$Age>20,]
age_greater_than_20
female_with_mark_greater_than_50<-data[data$Gender=="Female"&data$Marks>50,]
female_with_mark_greater_than_50
write.csv(female_with_mark_greater_than_50,"female>50Marks.csv",row.names = FALSE)
female_with_mark_greater_than_50<-data[data$Gender=="Female"&data$Marks>50,]
View(female_with_mark_greater_than_50)
View(female_with_mark_greater_than_50)
female_with_mark_greater_than_50
head(data)
tail(data,110)
tail(data,10)
#read a text file in R
textfile <- readLines("sample.txt", encoding = "UTF-8")
textfile
write.table(data,"sample.txt",sep="\t",quote=F,row.names = F)
print(getwd())
setwd("C:\\Users\\aravi\\Desktop\\StatisticsUsingR\\Labworks\\Task4")
print(getwd())
# Read the CSV file into a data frame
employee_data <- read.csv("employee_data.csv")
# Display the structure of the data frame
print(str(employee_data))
# Calculate and add a new column for years of service
employee_data$Years_of_Service <- 2023 - as.numeric(substring(employee_data$Joining_Year, start = 1, stop = 4))
# Create a new data frame for senior employees
senior_employees <- employee_data[employee_data$Years_of_Service >= 5, ]
# Print average salary by department
print(tapply(employee_data$Salary, employee_data$Department, mean))
# Print highest and lowest salaries with employee details
cat("Highest Salary:\n")
print(employee_data[employee_data$Salary == max(employee_data$Salary), c("Employee_ID", "Employee_Name", "Salary")])
cat("\nLowest Salary:\n")
print(employee_data[employee_data$Salary == min(employee_data$Salary), c("Employee_ID", "Employee_Name", "Salary")])
# Bar plot for the number of employees in each department
barplot(table(employee_data$Department), main="Number of Employees by Department", xlab="Department", ylab="Number of Employees")
# Scatter plot for years of service vs. salary
plot(employee_data$Years_of_Service, employee_data$Salary, main="Scatter Plot: Years of Service vs. Salary", xlab="Years of Service", ylab="Salary")
# Save the "Senior Employees" data frame as a CSV file
write.csv(senior_employees, "senior_employees.csv", row.names = FALSE)
# Display the structure of the data frame
print(employee_data)
# Calculate and add a new column for years of service
employee_data$Years_of_Service <- 2023 - as.numeric(substring(employee_data$Joining_Year, start = 1, stop = 4))
# Calculate and add a new column for years of service
employee_data$Years_of_Service <- 2023 - as.numeric(substring(employee_data$Joining_Year))
# Calculate and add a new column for years of service
employee_data$Years_of_Service <- 2023 - as.numeric(substring(employee_data$Joining_Year,first = 1, last = 4))
# Display the structure of the data frame
print(employee_data)
# Calculate and add a new column for years of service
employee_data$Years_of_Service <- 2023 - as.numeric(substring(employee_data$Joining_Date,first = 1, last = 4))
print(employee_data)
# Create a new data frame for senior employees
senior_employees <- employee_data[employee_data$Years_of_Service >= 5, ]
print(senior_employees)
# Print average salary by department
print(tapply(employee_data$Salary, employee_data$Department, mean))
# Print highest and lowest salaries with employee details
cat("Highest Salary:\n")
print(employee_data[employee_data$Salary == max(employee_data$Salary), c("Employee_ID", "Employee_Name", "Salary")])
print(employee_data[employee_data$Salary == max(employee_data$Salary), c("Employee_ID", "Name", "Salary")])
cat("\nLowest Salary:\n")
print(employee_data[employee_data$Salary == min(employee_data$Salary), c("Employee_ID", "Name", "Salary")])
# Bar plot for the number of employees in each department
barplot(table(employee_data$Department), main="Number of Employees by Department", xlab="Department", ylab="Number of Employees")
print(getwd())
setwd("C:\\Users\\aravi\\Desktop\\StatisticsUsingR\\Labworks\\Task4")
print(getwd())
# Read the CSV file into a data frame
employee_data <- read.csv("employee_data.csv")
# Display the structure of the data frame
print(employee_data)
# Calculate and add a new column for years of service
employee_data$Years_of_Service <- 2023 - as.numeric(substring(employee_data$Joining_Date,first = 1, last = 4))
print(employee_data)
# Create a new data frame for senior employees
senior_employees <- employee_data[employee_data$Years_of_Service >= 5, ]
print(senior_employees)
# Print average salary by department
print(tapply(employee_data$Salary, employee_data$Department, mean))
# Print highest and lowest salaries with employee details
cat("Highest Salary:\n")
print(employee_data[employee_data$Salary == max(employee_data$Salary), c("Employee_ID", "Name", "Salary")])
cat("\nLowest Salary:\n")
print(employee_data[employee_data$Salary == min(employee_data$Salary), c("Employee_ID", "Name", "Salary")])
# Bar plot for the number of employees in each department
barplot(table(employee_data$Department), main="Number of Employees by Department", xlab="Department", ylab="Number of Employees")
# Scatter plot for years of service vs. salary
plot(employee_data$Years_of_Service, employee_data$Salary, main="Scatter Plot: Years of Service vs. Salary", xlab="Years of Service", ylab="Salary")
# Save the "Senior Employees" data frame as a CSV file
write.csv(senior_employees, "senior_employees.csv", row.names = FALSE)
print(getwd())
setwd("C:\\Users\\aravi\\Desktop\\StatisticsUsingR\\Labworks\\Task4")
print(getwd())
# Read the CSV file into a data frame
employee_data <- read.csv("employee_data.csv")
# Display the structure of the data frame
print(employee_data)
# Calculate and add a new column for years of service
employee_data$Years_of_Service <- 2023 - as.numeric(substring(employee_data$Joining_Date,first = 1, last = 4))
print(employee_data)
# Create a new data frame for senior employees
senior_employees <- employee_data[employee_data$Years_of_Service >= 5, ]
print(senior_employees)
# Print average salary by department
print(tapply(employee_data$Salary, employee_data$Department, mean))
# Print highest and lowest salaries with employee details
cat("Highest Salary:\n")
print(employee_data[employee_data$Salary == max(employee_data$Salary), c("Employee_ID", "Name", "Salary")])
cat("\nLowest Salary:\n")
print(employee_data[employee_data$Salary == min(employee_data$Salary), c("Employee_ID", "Name", "Salary")])
# Bar plot for the number of employees in each department
barplot(table(employee_data$Department), main="Number of Employees by Department", xlab="Department", ylab="Number of Employees")
# Scatter plot for years of service vs. salary
plot(employee_data$Years_of_Service, employee_data$Salary, main="Scatter Plot: Years of Service vs. Salary", xlab="Years of Service", ylab="Salary")
# Save the "Senior Employees" data frame as a CSV file
write.csv(senior_employees, "senior_employees.csv", row.names = FALSE)
