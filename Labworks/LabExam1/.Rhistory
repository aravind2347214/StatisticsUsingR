library(plot3D)
scatter3D(x,y,z)
r<-rnorm(30,60,1)
s<-rnorm(30,60,1)
q()
#------------------------------------------------------------------
x1<-c("Dec","Jan","May","Nov")
month_levels<-c("Jan","Feb","March","Apr","May","June","July","Aug","Sep","Oct","Nov","Dec")
y1<-factor(x1,levels=month_levels)
print(y1)
sort(y1)
#------------------------------------------------------------------
x1<-c("Dec","Jan","May","Nov","qwerty")
month_levels<-c("Jan","Feb","March","Apr","May","June","July","Aug","Sep","Oct","Nov","Dec")
y1<-factor(x1,levels=month_levels)
print(y1)
#------------------------------------------------------------------
x1<-c("Dec","Jan","May","Nov")
month_levels<-c("Jan","Feb","March","Apr","May","June","July","Aug","Sep","Oct","Nov","Dec")
y1<-factor(x1,levels=month_levels)
print(y1)
sort(y1)
levels?
help
help()
ordered(y1)
is.factor(y1)
as.ordered(y1)
sort(y1)
#list
list_info<-list("Blue","YEllow",c(12,3,24),TRUE,13.5,103.5)
print(list_info)
is.ordered(y1)
a<-c(1,2,3,4,5)
b<-as.ordered(a)
is.ordered(b)
length(list_info)
list_info[6]= NULL
length(list_info)
print(list_info[7])
print(list_info[7])
list_info[2]= NULL
length(list_info)
print(list_info)
#Multiply matrix_A by a scalar value of 2 and store the result in a new matrix named matrix_mult
matrix_mult<-matrix_A*2
#Create two matrices, matrix_A and matrix_B
matrix_A<-matrix(c(10,5,3,6,3,4,2,5,2),nrow = 3,ncol=3,byrow = TRUE,dimnames = list(c("mAR1","mAR2","mAR3"),c("mAC1","mAC2","mAC3")))
#Multiply matrix_A by a scalar value of 2 and store the result in a new matrix named matrix_mult
matrix_mult<-matrix_A *2
rownames(matrix_mult)=c("m(A.2)R1","m(A.2)R2","m(A.2)R3")
colnames(matrix_mult)=c("m(A.2)C1","m(A.2)C2","m(A.2)C3")
print("Matrix Multiplication By 2")
print(matrix_mult)
#Create two matrices, matrix_A and matrix_B
matrix_A<-matrix(c(10,5,3,6,3,4,2,5,2),nrow = 3,ncol=3,byrow = TRUE,dimnames = list(c("mAR1","mAR2","mAR3"),c("mAC1","mAC2","mAC3")))
matrix_B<-matrix(c(2,4,1,9,4,2,7,6,4),nrow = 3,ncol=3,byrow = TRUE,dimnames = list(c("mBR1","mBR2","mBR3"),c("mBC1","mBC2","mBC3")))
#Calculate the sum of matrix_A and matrix_B and store the result in a new matrix named matrix_sum.
matrix_sum<-matrix_A+matrix_B
rownames(matrix_sum)=c("m(A+B)R1","m(A+B)R2","m(A+B)R3")
colnames(matrix_sum)=c("m(A+B)C1","m(A+B)C2","m(A+B)C3")
print("Matrix Sum")
print(matrix_sum)
#Calculate the difference between matrix_A and matrix_B and store the result in a new matrix named matrix_diff.
matrix_diff<-matrix_A-matrix_B
rownames(matrix_diff)=c("m(A-B)R1","m(A-B)R2","m(A-B)R3")
colnames(matrix_diff)=c("m(A-B)C1","m(A-B)C2","m(A-B)C3")
print("Matrix Diffrence")
print(matrix_diff)
#Multiply matrix_A by a scalar value of 2 and store the result in a new matrix named matrix_mult
matrix_mult<-matrix_A *2
rownames(matrix_mult)=c("m(A.2)R1","m(A.2)R2","m(A.2)R3")
colnames(matrix_mult)=c("m(A.2)C1","m(A.2)C2","m(A.2)C3")
print("Matrix Multiplication By 2")
print(matrix_mult)
#Calculate the product of matrix_A and matrix_B and store the result in a new matrix named matrix_product
matrix_product<-matrix_A %% matrix_B
rownames(matrix_product)=c("m(A*B)R1","m(A*B)R2","m(A*B)R3")
colnames(matrix_product)=c("m(A*B)C1","m(A*B)C2","m(A*B)C3")
print("Matrix Product")
print(matrix_product)
#Find the transpose of matrix_A and store the result in a new matrix named matrix_A_transpose
matrix_A_transpose<-t(matrix_A)
print("Matrix A Transpose")
print(matrix_A_transpose)
#Calculate the determinant of matrix_B and store it in a variable named determinant_B
determinant_B<-det(matrix_B)
print("Matrix B Determinant")
print(determinant_B)
#Invert matrix_B to obtain the inverse matrix and store it in a new matrix named matrix_B_inverse
matrix_B_inverse<-solve(matrix_B)
print("Matrix B Inverse")
print(matrix_B_inverse)
#Check if matrix_B is orthogonal (i.e., its transpose is equal to its inverse)
print("Checking If Matrix B is Orthogonal ...")
matrix_B_transpose<-t(matrix_B)
orthogonal_B<-matrix_B_transpose==matrix_B_inverse
c=0
for (x in orthogonal_B) {
if(x==FALSE){
c=1
break
}
}
if(c==0){
print("It is orthogonal")
}else{
print("It is not orthogonal")
}
#Calculate the element-wise square root of matrix_A and store the result in a new matrix named matrix_A_sqrt
matrix_A_sqrt<-sqrt(matrix_A)
print("SquareRoot of Matrix A")
print(matrix_A_sqrt)
#Calculate the mean of all the elements in matrix_B
mean_matrix_B<-mean(matrix_B)
print("Mean of Matrix A ")
print(mean_matrix_B)
#Calculate the sum of each column in matrix_A.
sum_matrix_A<-c(sum(matrix_A[,1]),sum(matrix_A[,2]),sum(matrix_A[,3]))
print("Matrix A Colomn Sum")
print(sum_matrix_A)
#Calculate the row means of matrix_B.
row_means_matrix_B<-c(mean(matrix_B[1,]),mean(matrix_B[2,]),mean(matrix_B[3]))
print("Matrix B Row Mean")
print(row_means_matrix_B)
#Extract the second row of matrix_A and store it in a vector named second_row_A
second_row_A<-matrix_A[2,]
print("Second Row of Matrix A")
print(second_row_A)
#Extract the third column of matrix_B and store it in a vector named third_column_B
third_column_B<-matrix_B[,3]
print("Third Column of Matrix B")
print(third_column_B)
#Calculate the row means of matrix_B.
row_means_matrix_B<-c(mean(matrix_B[1,]),mean(matrix_B[2,]),mean(matrix_B[3,]))
print("Matrix B Row Mean")
print(row_means_matrix_B)
#Calculate the row means of matrix_B.
row_means_matrix_B<-c(mean(matrix_B[1,]),mean(matrix_B[2,]),mean(matrix_B[3,]))
print("Matrix B Row Mean")
print(row_means_matrix_B)
sizes <- factor(c("Samll","Medium","Large"))
sizes
sizes<-relevel(size,"Medium")
sizes<-relevel(sizes,"Medium")
sizes
sizes<-factor(sizes,levels = rev(levels(sizes)))
sizes
sizes <- factor(c("Samll","Medium","Large"))
sizes
sizes <- factor(c("Samll","Medium","Large"))
sizes
sizes<-relevel(sizes,"Medium")
sizes
sizes<-factor(sizes,levels = rev(levels(sizes)))
sizes
df<- data.frame(NumberCol = 1:3,
TextcCol = c("FirstText", "SecondText","ThirdText")),
BoolCol = c(TRUE,TRUE,FALSE),
DoubleCol = c(1.2,4.4,7,4))
df<- data.frame(NumberCol = 1:3,
TextcCol = c("FirstText", "SecondText","ThirdText"),
BoolCol = c(TRUE,TRUE,FALSE),
DoubleCol = c(1.2,4.4,7,4))
df
df<- data.frame(
NumberCol = 1:3,
TextcCol = c("FirstText", "SecondText","ThirdText"),
BoolCol = c(TRUE,TRUE,FALSE),
DoubleCol = c(1.2,4.4,7.4)
)
df
str(df)
df<- data.frame(
NumberCol = 1:3,
TextcCol = c("FirstText", "SecondText","ThirdText"),
BoolCol = c(TRUE,TRUE,FALSE),
DoubleCol = c(1.2,4.4,7.4),
stringsAsFactors = False
)
df
str(df)
df<- data.frame(
NumberCol = 1:3,
TextcCol = c("FirstText", "SecondText","ThirdText"),
BoolCol = c(TRUE,TRUE,FALSE),
DoubleCol = c(1.2,4.4,7.4),
stringsAsFactors = False
)
df
df<- data.frame(
NumberCol = 1:3,
TextcCol = c("FirstText", "SecondText","ThirdText"),
BoolCol = c(TRUE,TRUE,FALSE),
DoubleCol = c(1.2,4.4,7.4),
stringsAsFactors = FALSE
)
df
df<- data.frame(
NumberCol = 1:3,
TextcCol = c("FirstText", "SecondText","ThirdText"),
BoolCol = c(TRUE,TRUE,FALSE),
DoubleCol = c(1.2,4.4,7.4),
#stringsAsFactors = FALSE
stringsAsFactors = TRUE
)
df
str(df)
v1<-1:3
v2<-c("FirstText", "SecondText","ThirdText")
v3<-c(1.2,4.4,7.4),
df2<-data.frame(col1=v1,col2=v2,col3=v3)
v3<-c(1.2,4.4,7.4)
df2<-data.frame(col1=v1,col2=v2,col3=v3)
df2
listdf<-list(item1=1:3,item2=c("FirstText", "SecondText","ThirdText"),item3=c(1.2,4.4,7.4))
newldf<-as.data.frame(listdf)
newldf
is.data.frame(newldf)
listdf<-list(item1=1:3,item2=c( "SecondText","ThirdText"),item3=c(1.2,4.4,7.4))
newldf<-as.data.frame(listdf)
newldf
listdf<-list(item1=1:3,item2=c( "SecondText","ThirdText"),item3=c(1.2,4.4,7.4))
listdf<-list(item1=1:3,item2=c( "SecondText","ThirdText"),item3=c(1.2,4.4,7.4))
newldf<-as.data.frame(listdf)
newldf
listdf<-list(item1=1:3,item2=c( "SecondText","ThirdText"),item3=c(1.2,4.4,7.4))
newldf<-as.data.frame(listdf)
newldf
is.data.frame(newldf)
listdf<-list(item1=1:3,item2=c( "SecondText","ThirdText"),item3=c(1.2,4.4,7.4))
newldf<-as.data.frame(listdf)
newldf
listdf<-list(item1=1:3,item2=c("SecondText","ThirdText"),item3=c(1.2,4.4,7.4))
newldf<-as.data.frame(listdf)
newldf
listdf<-list(item1=1:3,item2=c("SecondText","ThirdText"),item3=c(1.2,4.4,7.4))
newldf<-as.data.frame(listdf)
newldf
listdf<-list(item1=1:3,item2=c("SecondText","ThirdText"),item3=c(4.4,7.4))
newldf<-as.data.frame(listdf)
newldf
listdf<-list(item1=1:3,item2=c("SecondText","ThirdText"),item3=c(4.4,7.4))
newldf<-as.data.frame(listdf)
newldf
matA<-matrix(c(10,5,3,6),nrow = 2,ncol=2,byrow = TRUE,dimnames = list(c("m1R1","m1R2"),c("m1C1","m1C2")))
matdf<-as.data.frame(matA)
matA
i
listdf<-list(item1=1:3,item2=c("SecondText","ThirdText"),item3=c(4.4,7.4))
newldf<-as.data.frame(listdf)
newldf
listdf<-list(item1=1:3,item2=c("SecondText","ThirdText"),item3=c(4.4,7.4))
newldf<-as.data.frame(listdf)
newldf
matA<-matrix(c(10,5,3,6),nrow = 2,ncol=2,byrow = TRUE,dimnames = list(c("m1R1","m1R2"),c("m1C1","m1C2")))
listdf<-list(item1=1:2,item2=c("SecondText","ThirdText"),item3=c(4.4,7.4))
newldf<-as.data.frame(listdf)
newldf
df<-rbind(df,c(4,"FourthText",FALSE,5.5))
attributes(df)
#matrix to dataframe
matA<-matrix(c(10,5,3,6),nrow = 2,ncol=2,byrow = TRUE,dimnames = list(c("m1R1","m1R2"),c("m1C1","m1C2")))
matdf<-as.data.frame(matA)
#Dataframe
df<- data.frame(
NumberCol = 1:3,
TextcCol = c("FirstText", "SecondText","ThirdText"),
BoolCol = c(TRUE,TRUE,FALSE),
DoubleCol = c(1.2,4.4,7.4),
#stringsAsFactors = FALSE
stringsAsFactors = TRUE
)
attributes(df)
df[2:3,]
df[c(2,3)]
df[c("NumberCol","TextCol")]
df[c("NumberCol","TextcCol")]
df[1:2,c(1,3)]
df[,v]
v<-c(1,2,4)
df[,v]
df[,2]
df[,2,drop =FALSE]
df[,2]
data()
mtcars
mt[3]
mtcars[3]
mtcars[10,]
max(mtcars[1])
mtcars[9]==0
mtcar[mtcars$am==0]
mtcars[mtcars$am==0]
mtcars[mtcars[9]==0]
mtcars[mtcars$am==0,]
size(mtcars)
size(a[1])
dim(a)
a<-mtcars[mtcars$am==0,]
dim(a)
nrow(a)
b<-mtcars[mtcars$vs==0,]
row.names(b)
sixCyllinder<-mtcars[mtcars$cyl==6]
sixCyllinder
sixCyllinder<-mtcars[mtcars$cyl==6]
sixCyllinder
sixCyllinder<-mtcars[mtcars$cyl==6,]
sixCyllinder
foutcylindermaxmpg<-max(mtcars[mtcars$cyl==4,])
foutcylindermaxmpg
maxfcylmpg<-max(foutcylinder$mpg)
foutcylinder<-mtcars[mtcars$cyl==4,])
maxfcylmpg<-max(foutcylinder$mpg)
foutcylinder<-mtcars[mtcars$cyl==4,]
maxfcylmpg<-max(foutcylinder$mpg)
maxfcylmpg
nrow(foutcylinder[foutcylinder$am==0])
foutcylinder[foutcylinder$am==0]
mtcars[mtcars$am==0&&mtcars$cyl==4]
foutcylinder[foutcylinder$am==0,]
mean(mtcars[mtcars$cyl==6,]$wt)
mean(mtcars[mtcars$cyl==8,]$wt)
mean(mtcars[(mtcars$cyl==8&&mtcars$am==0),]$wt)
mean(mtcars[(mtcars$cyl==8&mtcars$am==0),]$wt)
data("precip")
precipData<-data("precip")
data
precipData
precipData<-data(precip)
precipData
precip
rivers
dicoveries
discoverie
discoveries
stripchart(rivers,method = "overplot")
stripchart(rivers,method = "jitter")
stripchart(rivers,method = "stack")
stripchart(rivers,method = "jitter")
stripchart(dicoveries,method = "jitter")
dicoveries
stripchart(discoveries,method = "jitter")
stripchart(rivers,method = "jitter")
stripchart(precip,method = "jitter")
stripchart(precip,xlab = "rainfall")
stripchart(discoveries,method = "stack")
stripchart(rivers,method = "jitter")
#histogram
hist(precip,main="")
hist(precip,freq = FALSE,main = "")
hist(precip,freq = FALSE)
stripchart(rivers,method = "overplot")
hist(precip,freq = FALSE,main = "")
hist(precip,freq = TRUE,main = "")
hist(precip,freq = FALSE,breaks = 100)
hist(precip,freq = TRUE,main = "Precip")
hist(precip,freq = FALSE,breaks = 1000)
hist(precip,freq = FALSE,breaks = 500)
hist(precip,freq = FALSE,breaks = 2400)
hist(precip,freq = FALSE,breaks = 200)
cars,xlab = "rainfall")
stripchart(mtcars,method = "jitter")
stripchart(mtcars,method = "stack")
#histogram
hist(mtcars,main="")
hist(mtcars,freq = TRUE,main = "Precip")
hist(mtcars
stripchart(mtcars,method = "jitter")
stripchart(mtcars,method = "stack")
stripchart(mtcars,method = "stack")
stripchart(mtcars,method = "jitter")
stripchart(mtcars,method = "jitter")
stripchart(mtcars,method = "stack")
stripchart(mtcars,method = "overplot")
#histogram
hist(mtcars,main="")
hist(mtcars,freq = TRUE,main = "Precip")
hist(mtcars,freq = FALSE,breaks = 200)
#histogram
hist(mtcars$mpg,main="")
hist(mtcars$gear,freq = TRUE,main = "Precip")
hist(mtcars$cyl,freq = FALSE,breaks = 200)
hist(mtcars$gear,freq = TRUE,main = "gear" ,breaks = "5")
hist(mtcars$gear,freq = TRUE,main = "gear" ,breaks = "5")
hist(mtcars$gear,freq = TRUE,main = "gear" ,breaks = 4)
hist(mtcars$gear,freq = TRUE,main = "gear" ,breaks = 100)
carsdata<-as.data.frame(mtcars)
carsdata
stripchart(carsdata$mpg,method = "overplot")
str(carsdata)
hist(mtcars$gear,freq = TRUE,main = "gear" ,breaks = 100)
carsdata.am<-factor(carsdata$gear)
carsdata
carsdata$am<-factor(carsdata$gear)
carsdata
carsdata<-as.data.frame(mtcars)
carsdata
carsdata$gear<-factor(carsdata$gear)
carsdata
str(carsdata)
hist(mtcars$gear,freq = TRUE,main = "gear" ,breaks = 100)
carsdata.qsec?
carsdata<-as.data.frame(mtcars)
carsdata
carsdata<-as.data.frame(mtcars)
carsdata
str(carsdata)
carsdata$gear<-as.ordered(carsdata$gear)
carsdata$am<-as.factor(carsdata$am)
carsdata$vs<-as.factor(carsdata$vs)
carsdata$cyl<-as.ordered(carsdata$cyl)
carsdata$carb<-as.ordered(carsdata$carb)
hist(mtcars$cyl)
hist(carsdata$cyl)
barplot(height = carsdata$cyl)
barplot(height = table(carsdata$cyl))
hist(carsdata$wt)
hist(carsdata$wt,xlab = "Car Weight")
hist(carsdata$wt,xlab = "Car Weight",ylab = "Number of Cars")
stripchart(carsdata$wt,xlab = "Car Weight")
hist(carsdata$cyl,xlab = "Car Weight",ylab = "Number of Cars")
hist(carsdata$wt,xlab = "Car Weight",ylab = "Number of Cars")
hist(carsdata$wt,xlab = "Car Weight",ylab = "Number of Cars",main = "Weight/Frequency Graph of Cars")
hist(carsdata$wt,xlab = "Car Weight",ylab = "Number of Cars",main = "Weight/Count Graph of Cars")
hist(carsdata$wt,xlab = "Car Weight",ylab = "Number of Cars",main = "Weight/Count Graph of Cars",xlim = 20,ylim = 10)
hist(carsdata$wt,xlab = "Car Weight",ylab = "Number of Cars",main = "Weight/Count Graph of Cars",xlim = 10,ylim = 10)
hist(carsdata$wt,xlab = "Car Weight",ylab = "Number of Cars",main = "Weight/Count Graph of Cars")
getwd()
setwd("C:\\Users\\aravi\\Desktop\\StatisticsUsingR\\Labworks\\LabExam1")
getwd()
data <- read.csv("UScereal1.csv")
nrow(data)
# find the maximum protien value of each manufacturer
max_protein_by_manufacturer <- aggregate(protein ~ mfr, data = data, FUN = max)
print(max_protein_by_manufacturer)
missing_values <- sum(is.na(data))
cat("Number of missing values:", missing_values, "\n")
summary_stats <- summary(data)
print(summary_stats)
for (col in names(data)) {
if (sum(is.na(data[[col]])) > 0) {
if (is.numeric(data[[col]])) {
data[[col]][is.na(data[[col]])] <- mean(data[[col]], na.rm = TRUE)
} else {
data[[col]][is.na(data[[col]])] <- names(sort(table(data[[col]]), decreasing = TRUE)[1])
}
}
}
missing_values_after_replace <- sum(is.na(data))
cat("Number of missing values after replacement:", missing_values_after_replace, "\n")
#get the summary statistics after handling the missing data
# (mean median min max 1st quartile 3rd quartile and standard deviation
print(summary(data))
library(ggplot2)
# Plot spread of Fiber for each manufacturer
ggplot2(data, aes(x = mfr, y = fibre, fill = mfr)) +
geom_boxplot() +
labs(title = "Spread of Fiber for Each Manufacturer",
x = "Manufacturer",
y = "Fiber Content") +
theme_minimal()
library("ggplot2")
# Plot spread of Fiber for each manufacturer
ggplot2(data, aes(x = mfr, y = fibre, fill = mfr)) +
geom_boxplot() +
labs(title = "Spread of Fiber for Each Manufacturer",
x = "Manufacturer",
y = "Fiber Content") +
theme_minimal()
# Plot spread of Fiber for each manufacturer
ggplot(data, aes(x = mfr, y = fibre, fill = mfr)) +
geom_boxplot() +
labs(title = "Spread of Fiber for Each Manufacturer",
x = "Manufacturer",
y = "Fiber Content") +
theme_minimal()
# create a plot to find the outlier for each shelf
ggplot(data, aes(x = as.factor(shelf), y = fibre)) +
geom_boxplot() +
geom_jitter(width = 0.2, alpha = 0.5) +
labs(title = "Outliers for Each Shelf",
x = "Shelf",
y = "Fiber Content") +
theme_minimal()
#create a plot to explore all numeric variable
ggplot(data, aes(x = factor(1), y = fibre)) +
geom_boxplot() +
geom_jitter(width = 0.2, alpha = 0.5) +
facet_wrap(~mfr, scales = "free_y") +
labs(title = "Numeric Variables",
x = "",
y = "Fiber Content") +
theme_minimal()
# create a plot to find the outlier for each shelf
ggplot(data, aes(x = as.factor(shelf), y = fibre)) +
geom_boxplot() +
geom_jitter(width = 0.3, alpha = 0.7) +
labs(title = "Outliers for Each Shelf",
x = "Shelf",
y = "Fiber Content") +
theme_minimal()
#create a plot to explore all numeric variable
ggplot(data, aes(x = factor(1), y = fibre)) +
geom_boxplot() +
geom_jitter(width = 0.3, alpha = 0.7) +
facet_wrap(~mfr, scales = "free_y") +
labs(title = "Numeric Variables",
x = "",
y = "Fiber Content") +
theme_minimal()
