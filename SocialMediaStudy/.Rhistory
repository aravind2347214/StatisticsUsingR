mt[3]
mtcars[3]
mtcars[10,]
max(mtcars[1])
mtcars[9]==0
mtcar[mtcars$am==0]
mtcars[mtcars$am==0]
mtcars[mtcars[9]==0]
mtcars[mtcars$am==0,]
size(mtcars)
size(a[1])
dim(a)
a<-mtcars[mtcars$am==0,]
dim(a)
nrow(a)
b<-mtcars[mtcars$vs==0,]
row.names(b)
sixCyllinder<-mtcars[mtcars$cyl==6]
sixCyllinder
sixCyllinder<-mtcars[mtcars$cyl==6]
sixCyllinder
sixCyllinder<-mtcars[mtcars$cyl==6,]
sixCyllinder
foutcylindermaxmpg<-max(mtcars[mtcars$cyl==4,])
foutcylindermaxmpg
maxfcylmpg<-max(foutcylinder$mpg)
foutcylinder<-mtcars[mtcars$cyl==4,])
maxfcylmpg<-max(foutcylinder$mpg)
foutcylinder<-mtcars[mtcars$cyl==4,]
maxfcylmpg<-max(foutcylinder$mpg)
maxfcylmpg
nrow(foutcylinder[foutcylinder$am==0])
foutcylinder[foutcylinder$am==0]
mtcars[mtcars$am==0&&mtcars$cyl==4]
foutcylinder[foutcylinder$am==0,]
mean(mtcars[mtcars$cyl==6,]$wt)
mean(mtcars[mtcars$cyl==8,]$wt)
mean(mtcars[(mtcars$cyl==8&&mtcars$am==0),]$wt)
mean(mtcars[(mtcars$cyl==8&mtcars$am==0),]$wt)
data("precip")
precipData<-data("precip")
data
precipData
precipData<-data(precip)
precipData
precip
rivers
dicoveries
discoverie
discoveries
stripchart(rivers,method = "overplot")
stripchart(rivers,method = "jitter")
stripchart(rivers,method = "stack")
stripchart(rivers,method = "jitter")
stripchart(dicoveries,method = "jitter")
dicoveries
stripchart(discoveries,method = "jitter")
stripchart(rivers,method = "jitter")
stripchart(precip,method = "jitter")
stripchart(precip,xlab = "rainfall")
stripchart(discoveries,method = "stack")
stripchart(rivers,method = "jitter")
#histogram
hist(precip,main="")
hist(precip,freq = FALSE,main = "")
hist(precip,freq = FALSE)
stripchart(rivers,method = "overplot")
hist(precip,freq = FALSE,main = "")
hist(precip,freq = TRUE,main = "")
hist(precip,freq = FALSE,breaks = 100)
hist(precip,freq = TRUE,main = "Precip")
hist(precip,freq = FALSE,breaks = 1000)
hist(precip,freq = FALSE,breaks = 500)
hist(precip,freq = FALSE,breaks = 2400)
hist(precip,freq = FALSE,breaks = 200)
cars,xlab = "rainfall")
stripchart(mtcars,method = "jitter")
stripchart(mtcars,method = "stack")
#histogram
hist(mtcars,main="")
hist(mtcars,freq = TRUE,main = "Precip")
hist(mtcars
stripchart(mtcars,method = "jitter")
stripchart(mtcars,method = "stack")
stripchart(mtcars,method = "stack")
stripchart(mtcars,method = "jitter")
stripchart(mtcars,method = "jitter")
stripchart(mtcars,method = "stack")
stripchart(mtcars,method = "overplot")
#histogram
hist(mtcars,main="")
hist(mtcars,freq = TRUE,main = "Precip")
hist(mtcars,freq = FALSE,breaks = 200)
#histogram
hist(mtcars$mpg,main="")
hist(mtcars$gear,freq = TRUE,main = "Precip")
hist(mtcars$cyl,freq = FALSE,breaks = 200)
hist(mtcars$gear,freq = TRUE,main = "gear" ,breaks = "5")
hist(mtcars$gear,freq = TRUE,main = "gear" ,breaks = "5")
hist(mtcars$gear,freq = TRUE,main = "gear" ,breaks = 4)
hist(mtcars$gear,freq = TRUE,main = "gear" ,breaks = 100)
carsdata<-as.data.frame(mtcars)
carsdata
stripchart(carsdata$mpg,method = "overplot")
str(carsdata)
hist(mtcars$gear,freq = TRUE,main = "gear" ,breaks = 100)
carsdata.am<-factor(carsdata$gear)
carsdata
carsdata$am<-factor(carsdata$gear)
carsdata
carsdata<-as.data.frame(mtcars)
carsdata
carsdata$gear<-factor(carsdata$gear)
carsdata
str(carsdata)
hist(mtcars$gear,freq = TRUE,main = "gear" ,breaks = 100)
carsdata.qsec?
carsdata<-as.data.frame(mtcars)
carsdata
carsdata<-as.data.frame(mtcars)
carsdata
str(carsdata)
carsdata$gear<-as.ordered(carsdata$gear)
carsdata$am<-as.factor(carsdata$am)
carsdata$vs<-as.factor(carsdata$vs)
carsdata$cyl<-as.ordered(carsdata$cyl)
carsdata$carb<-as.ordered(carsdata$carb)
hist(mtcars$cyl)
hist(carsdata$cyl)
barplot(height = carsdata$cyl)
barplot(height = table(carsdata$cyl))
hist(carsdata$wt)
hist(carsdata$wt,xlab = "Car Weight")
hist(carsdata$wt,xlab = "Car Weight",ylab = "Number of Cars")
stripchart(carsdata$wt,xlab = "Car Weight")
hist(carsdata$cyl,xlab = "Car Weight",ylab = "Number of Cars")
hist(carsdata$wt,xlab = "Car Weight",ylab = "Number of Cars")
hist(carsdata$wt,xlab = "Car Weight",ylab = "Number of Cars",main = "Weight/Frequency Graph of Cars")
hist(carsdata$wt,xlab = "Car Weight",ylab = "Number of Cars",main = "Weight/Count Graph of Cars")
hist(carsdata$wt,xlab = "Car Weight",ylab = "Number of Cars",main = "Weight/Count Graph of Cars",xlim = 20,ylim = 10)
hist(carsdata$wt,xlab = "Car Weight",ylab = "Number of Cars",main = "Weight/Count Graph of Cars",xlim = 10,ylim = 10)
hist(carsdata$wt,xlab = "Car Weight",ylab = "Number of Cars",main = "Weight/Count Graph of Cars")
getwd()
setwd("C:\\Users\\aravi\\Desktop\\StatisticsUsingR\\SocialMediaStudy")
getwd()
library(ggplot2)
data <- read.csv("IPSMOI.csv")
data <- data[-c(1, 2, 3)]
# Change Column Names to abbreviations
colnames(data)<-c("AgeGroup","Gender","CareerStatus","ResidentialArea",
"HRSPD","SIEFF","ACPA","MHAF","QRI",
"PC","CCF","SSCC","UEP","CASI","PDDA",
"SOSP","SMPF","RPS","TCEM","OLF","APOC","SMIF","PFO","PG")
#Data Conversions To numeric Ordinal Data
ggplot(data)
#data$HRSPD
data$HRSPD<-as.numeric(
factor(data$HRSPD,
levels = c("Less than 1 hour",
"1-2 hours",
"3-4 hours",
"5-6 hours",
"More than 6 hours")))
#data$SIEFF
data$SIEFF<-as.numeric(
factor(data$SIEFF,
levels = c("Significantly Negative",
"Slightly Negative",
"No Impact",
"Slightly Positive",
"Significantly Positive")))
#data$CareerStatus
data$CareerStatus<-factor(data$CareerStatus)
#data$PC
data$PC<-as.numeric(
factor(data$PC,
levels = c("Not Concerned at All",
"Not Very Concerned",
"Neutral",
"Somewhat Concerned",
"Very Concerned")))
#data$OLF
data$OLF<-as.numeric(
factor(data$OLF,
levels = c("No Online Friends",
"Less than 10",
"10-30",
"30-50",
"More than 50")))
#data$RPS
data$RPS<-as.numeric(
factor(data$RPS,
levels = c("Never",
"Rarely",
"Occasionally",
"Frequently",
"All the time")))
#data$SMIF
data$SMIF<-as.numeric(
factor(data$SMIF,
levels = c("Never",
"Rarely",
"Occasionally",
"Frequently",
"All the time")))
#data$PG
data$PG<-as.numeric(
factor(data$PG,
levels = c("Never",
"Rarely",
"Occasionally",
"Frequently",
"All the time")))
#data$MHAF
data$MHAF<-as.numeric(
factor(data$MHAF,
levels = c("Extremely Negative",
"Negative",
"No Impact",
"Positive",
"Extremely Positive")))
# Bar plot
ggplot(data, aes(x = AcademicStatus, fill = as.factor(SIEFF))) +
geom_bar(position = "dodge") +
labs(title = "Comparison of Academic Status and Social Interaction Impact",
x = "Academic Status",
y = "Count") +
scale_fill_manual(values = c("Significantly Negative" = "red", "Slightly Negative" = "orange",
"No Impact" = "yellow", "Slightly Positive" = "green",
"Significantly Positive" = "darkgreen"))
# Bar plot
ggplot(data, aes(x = CareerStatus, fill = as.factor(SIEFF))) +
geom_bar(position = "dodge") +
labs(title = "Comparison of Academic Status and Social Interaction Impact",
x = "Academic Status",
y = "Count") +
scale_fill_manual(values = c("Significantly Negative" = "red", "Slightly Negative" = "orange",
"No Impact" = "yellow", "Slightly Positive" = "green",
"Significantly Positive" = "darkgreen"))
# Bar plot
ggplot(data, aes(x = CareerStatus, fill = as.factor(SIEFF))) +
geom_bar(position = "dodge") +
labs(title = "Comparison of Academic Status and Social Interaction Impact",
x = "Academic Status",
y = "Count") +
scale_fill_manual(values = c("red", "orange", "yellow", "green", "darkgreen"))
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE)
# Stacked Bar plot
ggplot(data, aes(x = AcademicStatus, fill = as.factor(SIEFF))) +
geom_bar() +
labs(title = "Comparison of Academic Status and Social Interaction Impact",
x = "Academic Status",
y = "Count") +
scale_fill_manual(values = c("red", "orange", "yellow", "green", "darkgreen"))
# Point plot
ggplot(data, aes(x = AcademicStatus, y = SIEFF, color = AcademicStatus)) +
geom_point(position = position_dodge(width = 0.5), size = 2) +
labs(title = "Comparison of Academic Status and Social Interaction Impact",
x = "Academic Status",
y = "Social Interaction Impact") +
scale_color_manual(values = c("red", "orange", "yellow", "green", "darkgreen"))
# Point plot
ggplot(data, aes(x = CareerStatus, y = SIEFF, color = AcademicStatus)) +
geom_point(position = position_dodge(width = 0.5), size = 2) +
labs(title = "Comparison of Academic Status and Social Interaction Impact",
x = "Academic Status",
y = "Social Interaction Impact") +
scale_color_manual(values = c("red", "orange", "yellow", "green", "darkgreen"))
# Point plot
ggplot(data, aes(x = CareerStatus, y = SIEFF, color = CareerStatus)) +
geom_point(position = position_dodge(width = 0.5), size = 2) +
labs(title = "Comparison of Academic Status and Social Interaction Impact",
x = "Academic Status",
y = "Social Interaction Impact") +
scale_color_manual(values = c("red", "orange", "yellow", "green", "darkgreen"))
# Point plot
ggplot(data, aes(x = CareerStatus, y = SIEFF, color = CareerStatus)) +
geom_point(position = position_dodge(width = 0.5), size = 2) +
labs(title = "Comparison of Academic Status and Social Interaction Impact",
x = "Academic Status",
y = "Social Interaction Impact") +
scale_color_manual(values = c("red", "orange", "yellow", "green", "darkgreen","purple"))
# Violin plot
ggplot(data, aes(x = CareerStatus, y = SIEFF, fill = CareerStatus)) +
geom_violin() +
labs(title = "Comparison of Academic Status and Social Interaction Impact",
x = "Career Status",
y = "Social Interaction Impact") +
scale_fill_manual(values = c("red", "orange", "yellow", "green", "darkgreen"))
# Violin plot
ggplot(data, aes(x = CareerStatus, y = SIEFF, fill = CareerStatus)) +
geom_violin() +
labs(title = "Comparison of Academic Status and Social Interaction Impact",
x = "Career Status",
y = "Social Interaction Impact") +
scale_fill_manual(values = pallete("greem"))
# Violin plot
ggplot(data, aes(x = CareerStatus, y = SIEFF, fill = CareerStatus)) +
geom_violin() +
labs(title = "Comparison of Academic Status and Social Interaction Impact",
x = "Career Status",
y = "Social Interaction Impact") +
scale_fill_manual(values = my_palette)
my_palette <- c("#FF6F61", "#FFD166", "#6B5B95", "#88B04B", "#4F6367")
# Violin plot
ggplot(data, aes(x = CareerStatus, y = SIEFF, fill = CareerStatus)) +
geom_violin() +
labs(title = "Comparison of Academic Status and Social Interaction Impact",
x = "Career Status",
y = "Social Interaction Impact") +
scale_fill_manual(values = my_palette)
my_palette <- c("#FF6F61", "#FFD166", "#6B5B95", "#88B04B", "#4F6367")
# Blue Palette
blue_palette <- c("#3498db", "#5dade2", "#85c1e9", "#aed6f1", "#d6eaf8")
# Red Palette
red_palette <- c("#e74c3c", "#ec7063", "#f1948a", "#f5b7b1", "#f9bdbb")
# Green Palette
green_palette <- c("#2ecc71", "#58d68d", "#82e0aa", "#a9dfbf", "#d0e9c6")
# Yellow Palette
yellow_palette <- c("#f39c12", "#f5b041", "#f8c471", "#f9e79f", "#fcf3cf")
# Purple Palette
purple_palette <- c("#8e44ad", "#af7ac5", "#bb8fce", "#d2b4de", "#e8daef")
# Bar plot
ggplot(data, aes(x = CareerStatus, fill = as.factor(SIEFF))) +
geom_bar(position = "dodge") +
labs(title = "Comparison of Academic Status and Social Interaction Impact",
x = "Academic Status",
y = "Count") +
scale_fill_manual(values = red_palette)
# Point plot
ggplot(data, aes(x = CareerStatus, y = SIEFF, color = CareerStatus)) +
geom_point(position = position_dodge(width = 0.5), size = 2) +
labs(title = "Comparison of Academic Status and Social Interaction Impact",
x = "Career Status",
y = "Social Interaction Impact") +
scale_color_manual(values = blue_palette)
# Point plot
ggplot(data, aes(x = CareerStatus, y = SIEFF, color = CareerStatus)) +
geom_point(position = position_dodge(width = 0.5), size = 2) +
labs(title = "Comparison of Academic Status and Social Interaction Impact",
x = "Career Status",
y = "Social Interaction Impact") +
scale_color_manual(values =c("blue",blue_palette))
# Violin plot
ggplot(data, aes(x = CareerStatus, y = SIEFF, fill = CareerStatus)) +
geom_violin() +
labs(title = "Comparison of Academic Status and Social Interaction Impact",
x = "Career Status",
y = "Social Interaction Impact") +
scale_fill_manual(values = green_palette)
# Box plot
ggplot(data, aes(x = AcademicStatus, y = SIEFF, fill = AcademicStatus)) +
geom_boxplot() +
labs(title = "Comparison of Academic Status and Social Interaction Impact",
x = "Academic Status",
y = "Social Interaction Impact") +
scale_fill_manual(values = purple_palette)
# Box plot
ggplot(data, aes(x = CareerStatus, y = SIEFF, fill = CareerStatus)) +
geom_boxplot() +
labs(title = "Comparison of Academic Status and Social Interaction Impact",
x = "Academic Status",
y = "Social Interaction Impact") +
scale_fill_manual(values = purple_palette)
# Box plot
ggplot(data, aes(x = CareerStatus, y = SIEFF, fill = CareerStatus)) +
geom_boxplot() +
labs(title = "Comparison of Academic Status and Social Interaction Impact",
x = "Academic Status",
y = "Social Interaction Impact") +
scale_fill_manual(values = c("purple",purple_palette))
ggplot(data, aes(x = as.factor(PC), fill = as.factor(MHAF))) +
geom_bar(position = "dodge", stat = "count") +
labs(title = "Comparison of Privacy Concerns and Mental Health",
x = "Privacy Concern Level",
y = "Count") +
scale_fill_manual(values = blue_palette)
#Line Plot
ggplot(data, aes(x = as.factor(PC), y = as.numeric(MHAF), group = as.factor(MHAF), color = as.factor(MHAF))) +
geom_line() +
labs(title = "Comparison of Privacy Concerns and Mental Health",
x = "Privacy Concern Level",
y = "Mental Health Level") +
scale_color_manual(values = blue_palette)
#mossaic plot
# Assuming 'data' is your dataset with columns 'PC' and 'MHAF'
ggplot(data, aes(x = as.factor(PC), y = as.factor(MHAF), fill = ..count..)) +
geom_tile(stat = "count", color = "white") +
labs(title = "Mosaic Plot of Privacy Concerns and Mental Health",
x = "Privacy Concern Level",
y = "Mental Health Level") +
scale_fill_viridis_c()
#-------------------------------------------------------------------------------
#Comparison Of Academic Status and Social Interaction Impact
# Bar plot
ggplot(data, aes(x = CareerStatus, fill = as.factor(SIEFF))) +
geom_bar(position = "dodge") +
labs(title = "Comparison of Academic Status and Social Interaction Impact",
x = "Academic Status",
y = "Count") +
scale_fill_manual(values = red_palette)
#mossaic plot
# Assuming 'data' is your dataset with columns 'PC' and 'MHAF'
ggplot(data, aes(x = as.factor(PC), y = as.factor(MHAF), fill = ..count..)) +
geom_tile(stat = "count", color = "white") +
labs(title = "Mosaic Plot of Privacy Concerns and Mental Health",
x = "Privacy Concern Level",
y = "Mental Health Level") +
scale_fill_viridis_c()
#mossaic plot
# Assuming 'data' is your dataset with columns 'PC' and 'MHAF'
ggplot(data, aes(x = as.factor(PC), y = as.factor(MHAF), fill = ..count..)) +
geom_tile(stat = "count", color = "white") +
labs(title = "Mosaic Plot of Privacy Concerns and Mental Health",
x = "Privacy Concern Level",
y = "Mental Health Level") +
scale_fill_viridis_c()
data
data<-mtcars
data
g1=ggplot(data,aes(mpg,disp))
g1
g1 = g1 + geom_abline()
g1 = g1 + geom_point()
g1
g1 = g1 + geom_abline()
g1
g1 = g1 + geom_bar()
g1
g1 = g1 + geom_point()
g1
library(ggplot2)
data<-mtcars
data
g1=ggplot(data,aes(mpg,disp))
g1
g1=g1+geom_point(aes(color=factor(cyl)))
g1
library(ggplot2)
data<-mtcars
data
g1=ggplot(data,aes(mpg,disp))
g1+geom_point(aes(color=factor(cyl)))
g1+geom_point(aes(color=factor(cyl)))
g1+geom_point(aes(color=factor(cyl)),size = 4)
g1+geom_text(aes(color=factor(cyl)),size = 4)
g1+geom_text(aes(label=cyl),size = 4)
g1+geom_text(aes(label=cyl),size = 400)
g1+geom_text(aes(label=cyl),size = 10)
g1+geom_text(aes(label=cyl),size = 3)
g1+GeomPolygon
ggplot(data = mtcars,aes(x=mpg,y=factor(cyl),size=factor(gear)))
library(ggplot2)
data<-mtcars
data
g1=ggplot(data,aes(mpg,disp))
g1+geom_point(aes(color=factor(cyl)))
g1+geom_text(aes(label=cyl),size = 3)
ggplot(data = mtcars,aes(x=mpg,y=factor(cyl),size=factor(gear)))
ggplot(data = mtcars,aes(x=mpg,y=hp,col=factor(cyl),size=factor(gear)))
+geom_point()
+labs(size="gear",col="cyl")
library(ggplot2)
data<-mtcars
data
g1=ggplot(data,aes(mpg,disp))
g1+geom_point(aes(color=factor(cyl)))
g1+geom_text(aes(label=cyl),size = 3)
ggplot(data = mtcars,aes(x=mpg,y=hp,col=factor(cyl),size=factor(gear)))
+geom_point()
+labs(size="gear",col="cyl")
ggplot(data = mtcars,aes(x=mpg,y=hp,col=factor(cyl),size=factor(gear)))+geom_point()+labs(size="gear",col="cyl")
myscaterplot<-ggplot(mtcars,aes(x=wt,y=mpg,col=factor(cyl),size=wt))+geom_polygon()
myscaterplot
myscaterplot<-ggplot(mtcars,aes(x=wt,y=mpg,col=factor(cyl),size=wt))+geom_abline()
myscaterplot
myscaterplot + facet_grid(~cyl)
myscaterplot<-ggplot(mtcars,aes(x=wt,y=mpg,col=factor(cyl),size=wt))+geom_bin_2d()
myscaterplot + facet_grid(~cyl)
myscaterplot<-ggplot(mtcars,aes(x=wt,y=mpg,col=factor(cyl),size=wt))+geom_()
myscaterplot<-ggplot(mtcars,aes(x=wt,y=mpg,col=factor(cyl),size=wt))+geom_area()
myscaterplot + facet_grid(~cyl)
myscaterplot<-ggplot(mtcars,aes(x=wt,y=mpg,col=factor(cyl),size=wt))+geom_
myscaterplot<-ggplot(mtcars,aes(x=wt,y=mpg,col=factor(cyl),size=wt))+geom_contour()
myscaterplot + facet_grid(~cyl)
myscaterplot<-ggplot(mtcars,aes(x=wt,y=mpg,col=factor(cyl),size=wt))+geom_histogram()
myscaterplot + facet_grid(~cyl)
myscaterplot<-ggplot(mtcars,aes(x=wt,y=mpg,col=factor(cyl),size=wt))+geom_histogram()
myscaterplot + facet_grid(~cyl)
myscaterplot<-ggplot(mtcars,aes(x=wt,y=mpg,col=factor(cyl),size=wt))+geom_smooth()
myscaterplot + facet_grid(~cyl)
myscaterplot<-ggplot(mtcars,aes(x=wt,y=mpg,col=factor(cyl),size=wt))+geom_density()
myscaterplot + facet_grid(~cyl)
myscaterplot<-ggplot(mtcars,aes(x=wt,y=mpg,col=factor(cyl),size=wt))+geom_density(alpha=1)
myscaterplot + facet_grid(~cyl)
myscaterplot<-ggplot(mtcars,aes(x=wt,y=mpg,col=factor(cyl),size=wt))+geom_plot(alpha=1)
myscaterplot + facet_grid(~cyl)
myscaterplot<-ggplot(mtcars,aes(x=wt,y=mpg,col=factor(cyl),size=wt))+geom_plot()
myscaterplot + facet_grid(~cyl)
myscaterplot<-ggplot(mtcars,aes(x=wt,y=mpg,col=factor(cyl),size=wt))+geom_point()
myscaterplot + facet_grid(~cyl)
ggplot(mtcars,aes(x=mpg,fill=as.factor(cyl)))+geom_density()
help(ggplot)
?ggplot2
?ggplot()
myscaterplot<-ggplot(mtcars,aes(x=wt,y=mpg,col=factor(cyl),size=wt))+bar()
myscaterplot + facet_grid(~cyl)
myscaterplot<-ggplot(mtcars,aes(x=wt,y=mpg,col=factor(cyl),size=wt))+geom_bar()
myscaterplot + facet_grid(~cyl)
ggplot(data = mtcars,mapping = aes(x=cyl,y=factor(am)))+geom_bar()
ggplot(data = mtcars,mapping = aes(x=cyl,fill=as.factor(am)))+geom_bar()
